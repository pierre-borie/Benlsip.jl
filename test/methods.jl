#= Test problem generated by Claude 3 
    - 3 paramaters 
    - 4 residuals 
    - 1 nonlinear equality constraints
    - 1 linear equality constraint 
    - lower and upper bounds on all variables 
    =#

# Linear constraints 
x_l = [-2., -1.5, 0]
x_u = [2., 1.5, 2.]
A = [1. 2 -1]
b = [0.5]

# Residuals 

r(x::Vector) = [x[1]^2 + x[2]^2 - 2*x[1] + sin(x[1]+x[2]) - 1.5, 
    x[1]*x[2] + 0.5*cos(2*x[1]) - 0.8, 
    (x[1]-1.0)^2 + (x[2]-0.5)^2 - x[3], 
    x[3]^2-x[1]+0.3*sin(x[3])-0.2]

jac_r(x::Vector) = [2*x[1]-2+cos(x[1]+x[2]) 2*x[2]+cos(x[1]+x[2]) 0.0;
x[2]-sin(2*x[1]) x[1] 0.0;
2*(x[1]-1) 2*(x[2]-0.5) -1.0;
-1.0 0.0 2*x[3]+0.3*cos(x[3])]
# Nonlinear constraints 
c(x::Vector) = [x[1]^2 + x[2]^2 + x[3]^2 - 3]

jac_c(x::Vector) = [2*x[1] 2*x[2] 2*x[3]]

# Starting point 
x0 = [1.0, 0.5, 1.5]

@testset "Hessian structure" begin
    Jx0 = jac_r(x0)
    Cx0 = jac_c(x0)
    mu0 = 10.0

    greedy_H = Jx0'*Jx0 + mu0*Cx0'*Cx0
    H = BEnlsip.AlHessian(Jx0,Cx0,mu0)

    Hx = H*x0
    greedy_Hx = greedy_H*x0
    xtHx = BEnlsip.vthv(H,x0)
    greedy_xtHx = dot(x0,greedy_Hx)

    @test Hx ≈ greedy_Hx
    @test xtHx ≈ greedy_xtHx
end
# @testset "Intermediate methods" begin
   
#     x_sol, y_sol = tralcnllss(x0,
#     r,
#     jac_r,
#     c,
#     jac_c,
#     A,
#     b,
#     x_l,
#     x_u;
#     max_outer_iter=100,
#     max_inner_iter=250)

#     @show x_sol
#     @show y_sol
#     rx_sol = r(x_sol)
#     Jx_sol = jac_r(x_sol)
#     Cx_sol = jac_c(x_sol)
#     cx_sol = c(x_sol)
#     @show cx_sol
#     norm_∇lag = norm(Jx_sol'*rx_sol - Cx_sol'*y_sol)
#     @show norm_∇lag
#     atol = sqrt(eps(Float64))

#     @test norm(cx_sol) < atol
#     @test BEnlsip.is_feasible(x_sol,A,x_l,x_u;b=b)
#     @test norm_∇lag < atol
# end